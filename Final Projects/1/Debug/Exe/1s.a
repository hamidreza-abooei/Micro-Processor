;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/28/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#define EN PORTC.2
;#define RW PORTC.1
;#define RS PORTC.0
;#define lcd PORTD
;
;// Declare your global variables here
;unsigned char waiting[] = "WAITING";

	.DSEG
;unsigned char fname[] = "Hamidreza";
;unsigned char lname[] = "Abooei";
;unsigned char wrong[] = "WRONG";
;int i ;
;
;void lcd_command(unsigned char data){
; 0000 0026 void lcd_command(unsigned char data){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0027     lcd = data;
;PCODE: $0000000F VOL: 0
;	data -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0028     RS = 0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0029     RW = 0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002A     EN = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002B     delay_ms(2);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002C     EN = 1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002D     RS = 0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002E     RW = 0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002F 
; 0000 0030 }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;void lcd_data(unsigned char data){
; 0000 0031 void lcd_data(unsigned char data){
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0032     lcd = data;
;PCODE: $00000026 VOL: 0
;	data -> Y+0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0033     RS = 1;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0034     RW = 0;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0035     EN = 0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0036     delay_ms(2);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0037     EN = 1;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0038     RS = 0;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0039     RW = 0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003A }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;void lcd_init(void){
; 0000 003C void lcd_init(void){
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003D     lcd_command(0x38);//function set
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 003E     lcd_command(0b1100);//on/off display
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003F     lcd_command(0b110);//inc
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0040     lcd_command(0x01);//clear
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0041 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;// SPI interrupt service routine
;interrupt [SPI_STC] void spi_isr(void)
; 0000 0045 {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0046 unsigned char data;
; 0000 0047 data=SPDR;
;PCODE: $00000049 VOL: 0
;	data -> R17
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0048 if (data == 0x55){   //true
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0049     lcd_command(0x01);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 004A     for (i=0;fname[i]!='\0';i++){
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004B         lcd_data(fname[i]);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 004C     }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 004D     lcd_command(0xC0);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 004E     for (i=0;lname[i]!='\0';i++){
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 004F         lcd_data(lname[i]);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0050     }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0051 
; 0000 0052 }
; 0000 0053 if (data == 0xAA){   //false
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0054     lcd_command(0x01);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0055     for (i=0;wrong[i]!='\0';i++){
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0056         lcd_data(wrong[i]);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0057     }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0058 }
; 0000 0059 
; 0000 005A }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;
;void main(void)
; 0000 005D {
;PCODE: $000000A3 VOL: 0
; 0000 005E // Declare your local variables here
; 0000 005F 
; 0000 0060 // Input/Output Ports initialization
; 0000 0061 // Port A initialization
; 0000 0062 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0063 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0064 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0065 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0066 
; 0000 0067 // Port B initialization
; 0000 0068 // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0069 DDRB=(0<<DDB7) | (1<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 006A // State: Bit7=T Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 006C 
; 0000 006D // Port C initialization
; 0000 006E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 006F DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0070 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=1 Bit1=0 Bit0=0
; 0000 0071 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (1<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0072 
; 0000 0073 // Port D initialization
; 0000 0074 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0075 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0076 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0077 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0078 
; 0000 0079 // Analog Comparator initialization
; 0000 007A // Analog Comparator: Off
; 0000 007B // The Analog Comparator's positive input is
; 0000 007C // connected to the AIN0 pin
; 0000 007D // The Analog Comparator's negative input is
; 0000 007E // connected to the AIN1 pin
; 0000 007F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0080 SFIOR=(0<<ACME);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0081 
; 0000 0082 
; 0000 0083 // SPI initialization
; 0000 0084 // SPI Type: Slave
; 0000 0085 // SPI Clock Rate: 2000.000 kHz
; 0000 0086 // SPI Clock Phase: Cycle Start
; 0000 0087 // SPI Clock Polarity: Low
; 0000 0088 // SPI Data Order: MSB First
; 0000 0089 SPCR=(1<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 008A SPSR=(0<<SPI2X);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 008B 
; 0000 008C // Clear the SPI interrupt flag
; 0000 008D #asm
;PCODE: $000000BC VOL: 0
; 0000 008E     in   r30,spsr
    in   r30,spsr
;PCODE: $000000BD VOL: 0
; 0000 008F     in   r30,spdr
    in   r30,spdr
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0090 #endasm
; 0000 0091 
; 0000 0092 // Global enable interrupts
; 0000 0093 #asm("sei")
;PCODE: $000000C0 VOL: 0
	sei
;PCODE: $000000C1 VOL: 0
; 0000 0094 lcd_init();
;PCODE: $000000C2 VOL: 0
; 0000 0095 for (i=0;waiting[i]!='\0';i++){
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0096     lcd_data(waiting[i]);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0097 }
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0098 
; 0000 0099 while (1)
;PCODE: $000000DA VOL: 0
; 0000 009A       {
; 0000 009B 
; 0000 009C       }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 009D }
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
