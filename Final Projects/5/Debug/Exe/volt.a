;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/30/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
;// Declare your global variables here
;unsigned int data,data1;
;float res;
;unsigned char outl,outh;
;unsigned char temp;
;const unsigned char seven[] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x2, 0x78, 0x0, 0x10};
;
;
;
;void show(unsigned char outh,unsigned char outl){
; 0000 0026 void show(unsigned char outh,unsigned char outl){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0027     temp = outh / 10;
;PCODE: $0000000F VOL: 0
;	outh -> Y+1
;	outl -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0028     PORTD = 0x01;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0029     PORTC = seven[temp]| 0x80;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002A     delay_us(550);
;PCODE: $0000001D VOL: 0
; 0000 002B 
; 0000 002C     temp = outh % 10;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002D     PORTD = 0x02;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002E     PORTC = seven[temp] ;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002F     delay_us(550);
;PCODE: $0000002A VOL: 0
; 0000 0030 
; 0000 0031     temp = outl / 10;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0032     PORTD = 0x04;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0033     PORTC = seven[temp]| 0x80;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0034     delay_us(550);
;PCODE: $00000038 VOL: 0
; 0000 0035 
; 0000 0036 
; 0000 0037     temp = outl % 10;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0038     PORTD = 0x08;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0039     PORTC = seven[temp]| 0x80;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 003A     delay_us(550);
;PCODE: $00000046 VOL: 0
; 0000 003B 
; 0000 003C 
; 0000 003D 
; 0000 003E 
; 0000 003F }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;// ADC interrupt service routine
;// with auto input scanning
;//interrupt [ADC_INT] void adc_isr(void)
;//{
;//
;//    data = ADCL;
;//    data = data + ADCH<<8;
;//    PORTB = data;
;//    res = data * 5.0 / 1024.0;
;//    outh = (unsigned char) res;
;//    //PORTB = outh;
;//    outl = (unsigned char) ((res - outh)*100);
;//
;//// Delay needed for the stabilization of the ADC input voltage
;////delay_us(10);
;//// Start the AD conversion
;//ADCSRA|=(1<<ADSC);
;//}
;
;void main(void)
; 0000 0055 {
;PCODE: $0000004A VOL: 0
; 0000 0056 // Declare your local variables here
; 0000 0057 
; 0000 0058 // Input/Output Ports initialization
; 0000 0059 // Port A initialization
; 0000 005A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005E 
; 0000 005F // Port B initialization
; 0000 0060 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0061 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0062 //DDRB = 0xff;
; 0000 0063 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0064 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0065 
; 0000 0066 // Port C initialization
; 0000 0067 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0068 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0069 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 006A PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 006B 
; 0000 006C // Port D initialization
; 0000 006D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 006E DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 006F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0070 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0071 
; 0000 0072 // ADC initialization
; 0000 0073 // ADC Clock frequency: 1000.000 kHz
; 0000 0074 // ADC Voltage Reference: AREF pin
; 0000 0075 // ADC Auto Trigger Source: Free Running
; 0000 0076 ADMUX= ADC_VREF_TYPE;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0077 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0078 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0079 
; 0000 007A // Global enable interrupts
; 0000 007B #asm("sei")
;PCODE: $00000061 VOL: 0
	sei
;PCODE: $00000062 VOL: 0
; 0000 007C 
; 0000 007D while (1)
;PCODE: $00000063 VOL: 0
; 0000 007E       {
; 0000 007F       // Place your code here
; 0000 0080 
; 0000 0081 
; 0000 0082 
; 0000 0083 
; 0000 0084     // Delay needed for the stabilization of the ADC input voltage
; 0000 0085     //delay_us(10);
; 0000 0086     // Start the AD conversion
; 0000 0087     ADCSRA|=(1<<ADSC);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0088     while((ADCSRA & (1<<ADIF))==0){
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0089         show(outh,outl);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 008A     }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 008B     //temp = ADCL;
; 0000 008C     //PORTB = temp;
; 0000 008D     //data = temp + ADCH<<8;
; 0000 008E     data = ADCL;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 008F     data = temp>>6;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0090     data1 = ADCH;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0091     data1 = data1<<2;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0092     res = (data1 + data) * 100.0 / 1024.0;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0093     outh = (unsigned char) res;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0094     //PORTB = outh;
; 0000 0095     outl = (unsigned char) ((res - outh)*100);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0096 
; 0000 0097 
; 0000 0098       }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0099 }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
