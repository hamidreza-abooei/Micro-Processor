;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/30/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;//eeprom unsigned char id@0x00;
;//eeprom unsigned char age@0x01;
;//eeprom unsigned char hr@0x02;
;//int eeprom  *ptr_id;
;//unsigned char eeprom  *ptr_age;
;//unsigned char eeprom  *ptr_hr;
;
;
;unsigned char counter = 0;
;unsigned char sec = 0;
;unsigned char read_heart = 0;
;unsigned char HR = 0;
;unsigned char AGE = 0;
;unsigned char ID = 0;
;unsigned char state =0;
;unsigned char str_id[] = "Enter ID";

	.DSEG
;unsigned char str_age[] = "Enter Age";
;unsigned char str_HR[] = "Wait 1 min";
;unsigned char i;
;unsigned char flag = 0;
;unsigned char key_pressed;
;unsigned char temp[3];
;
;void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
; 0000 0033 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0034 /* Wait for completion of previous write */
; 0000 0035 while(EECR & (1<<EEWE))
;PCODE: $0000000F VOL: 0
;	uiAddress -> Y+1
;	ucData -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0036 ;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0037 /* Set up address and data registers */
; 0000 0038 EEAR = uiAddress;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0039 EEDR = ucData;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 003A /* Write logical one to EEMWE */
; 0000 003B EECR |= (1<<EEMWE);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003C /* Start eeprom write by setting EEWE */
; 0000 003D EECR |= (1<<EEWE);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003E }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;
;
;unsigned char EEPROM_read(unsigned int uiAddress)
; 0000 0043 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0044 /* Wait for completion of previous write */
; 0000 0045 while(EECR & (1<<EEWE))
;PCODE: $00000023 VOL: 0
;	uiAddress -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0046 ;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0047 /* Set up address register */
; 0000 0048 EEAR = uiAddress;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0049 /* Start eeprom read by writing EERE */
; 0000 004A EECR |= (1<<EERE);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004B /* Return data from data register */
; 0000 004C return EEDR;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004D }
;PCODE: $00000031 VOL: 0
;
;
;void show_msg (unsigned char *a){
; 0000 0050 void show_msg (unsigned char *a){
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0051     for (i=0 ; a[i] != '\0';i++ ){
;PCODE: $00000034 VOL: 0
;	*a -> Y+0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0052          UDR = a[i];
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0053          while(!(UCSRA & (1<<UDRE)));
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0054     }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0055     UDR = '\n';
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0056     while(!(UCSRA & (1<<UDRE)));
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0057 
; 0000 0058 }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;void show_number (unsigned char a){
; 0000 005A void show_number (unsigned char a){
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 005B     for (i = 0;i<3;i++){
;PCODE: $00000059 VOL: 0
;	a -> Y+0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 005C         temp[i] = a%10;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005D         a = a/10;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 005E     }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 005F     for (i = 0; i < 3 ; i++){
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0060         UDR = '0'+temp[2-i];
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0061         while(!(UCSRA & (1<<UDRE)));
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0062     }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0063     UDR = ' ';
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0064     while(!(UCSRA & (1<<UDRE)));
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0065 
; 0000 0066 }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0069 {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 006A     if (read_heart == 1){
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 006B        HR++;
;PCODE: $0000009E VOL: 0
; 0000 006C 
; 0000 006D     }
; 0000 006E 
; 0000 006F }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0073 {
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0074     //show();     //todo
; 0000 0075 
; 0000 0076     for (i = 0; i<counter;i++){
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0077         show_msg("#");
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0078         show_number(i);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0079         show_number(EEPROM_read(0x00 + i * 3));
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 007A         show_number(EEPROM_read(0x01 + i * 3));
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 007B         show_number(EEPROM_read(0x02 + i * 3));
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 007C         UDR = '\n';
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 007D         while(!(UCSRA & (1<<UDRE)));
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 007E 
; 0000 007F     }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0080 
; 0000 0081 
; 0000 0082 }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0

	.DSEG
_0x25:
	.BYTE 0x2
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0086 {

	.CSEG
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0087     sec++;
;PCODE: $000000DA VOL: 0
; 0000 0088     if (sec < 59){ //should be 59 for one minute
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0089        // Reinitialize Timer1 value
; 0000 008A         TCNT1H=0x85EE >> 8;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 008B         TCNT1L=0x85EE & 0xff;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 008C     }else{    // turn off timer
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 008D         read_heart = 0;
;PCODE: $000000E4 VOL: 0
; 0000 008E         state = 0;
;PCODE: $000000E5 VOL: 0
; 0000 008F         show_number(HR);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0090         UDR = '\n';
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0091         while(!(UCSRA & (1<<UDRE)));
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0092         show_msg(str_id);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0093         TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0094         TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0095         flag = 1;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0096 
; 0000 0097 
; 0000 0098 
; 0000 0099 
; 0000 009A     }
;PCODE: $000000F8 VOL: 0
; 0000 009B 
; 0000 009C }
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;
;
;
;
;void send_number (unsigned char number){
; 0000 00A1 void send_number (unsigned char number){
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00A2     if(number == 10){     //Enter      state = 0: ID    state = 1: Age      state = 2:  counting HR
;PCODE: $000000FE VOL: 0
;	number -> Y+0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00A3          if (state == 0){
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00A4             show_msg(str_age);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00A5             AGE = 0;
;PCODE: $00000106 VOL: 0
; 0000 00A6             state = 1;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00A7          }else if(state == 1){
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00A8             // Timer/Counter 1 initialization
; 0000 00A9             // Clock source: System Clock
; 0000 00AA             // Clock value: 31.250 kHz
; 0000 00AB             // Mode: Normal top=0xFFFF
; 0000 00AC             // OC1A output: Disconnected
; 0000 00AD             // OC1B output: Disconnected
; 0000 00AE             // Noise Canceler: Off
; 0000 00AF             // Input Capture on Falling Edge
; 0000 00B0             // Timer Period: 1 s
; 0000 00B1             // Timer1 Overflow Interrupt: On
; 0000 00B2             // Input Capture Interrupt: Off
; 0000 00B3             // Compare A Match Interrupt: Off
; 0000 00B4             // Compare B Match Interrupt: Off
; 0000 00B5             sec = 0;
;PCODE: $0000010E VOL: 0
; 0000 00B6             HR = 0;
;PCODE: $0000010F VOL: 0
; 0000 00B7             TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00B8             TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00B9             TCNT1H=0x85;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00BA             TCNT1L=0xEE;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00BB             ICR1H=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00BC             ICR1L=0x00;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00BD             OCR1AH=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00BE             OCR1AL=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00BF             OCR1BH=0x00;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00C0             OCR1BL=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00C1 
; 0000 00C2             // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C3             TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE ...
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00C4             read_heart = 1;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00C5             show_msg(str_HR);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00C6             state = 2;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00C7          }
; 0000 00C8 
; 0000 00C9 
; 0000 00CA     }else if (number == 11){    // Save
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00CB          EEPROM_write(0x00 + counter * 3,ID);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00CC          EEPROM_write(0x01 + counter * 3,AGE);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00CD          EEPROM_write(0x02 + counter * 3,HR);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00CE          show_number(ID);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00CF          show_number(AGE);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00D0          show_number(HR);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00D1          show_msg("Saved");
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00D2          counter++;
;PCODE: $00000151 VOL: 0
; 0000 00D3 
; 0000 00D4 
; 0000 00D5     }else if ((state == 0) ){
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00D6         if (flag == 1){
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00D7             ID = 0;
;PCODE: $00000159 VOL: 0
; 0000 00D8             flag =0;
;PCODE: $0000015A VOL: 0
; 0000 00D9             //show_msg("Clear");
; 0000 00DA         }
; 0000 00DB          ID = ID*10 + number;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00DC          UDR = '0'+number;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00DD          while(!(UCSRA & (1<<UDRE)));
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00DE          //show_number(ID);
; 0000 00DF 
; 0000 00E0     }else if ( (state == 1)){
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00E1          AGE = AGE *10 + number;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00E2          UDR = '0'+number;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00E3          while(!(UCSRA & (1<<UDRE)));
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00E4 
; 0000 00E5     }
; 0000 00E6 
; 0000 00E7 }
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0

	.DSEG
_0x34:
	.BYTE 0x6
;
;void GET_KEY (void){
; 0000 00E9 void GET_KEY (void){

	.CSEG
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00EA     key_pressed = 50;   //
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00EB     PORTA=0XFE;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00EC     if(PINB.0==0)
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00ED             {
; 0000 00EE             delay_ms(100);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00EF             if(PINB.0==0)
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00F0                 {
; 0000 00F1                     //while (PINB.0==0){}
; 0000 00F2                     key_pressed=1;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00F3                 }
; 0000 00F4             }
;PCODE: $00000197 VOL: 0
; 0000 00F5      if(PINB.1==0)
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00F6             {
; 0000 00F7             delay_ms(100);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00F8             if(PINB.1==0)
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00F9                 {
; 0000 00FA                     //while (PINB.1==0){}
; 0000 00FB                     key_pressed=4;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00FC                 }
; 0000 00FD             }
;PCODE: $000001A4 VOL: 0
; 0000 00FE 
; 0000 00FF      if(PINB.2==0)
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0100             {
; 0000 0101             delay_ms(100);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0102             if(PINB.2==0)
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0103                 {
; 0000 0104                     //while (PINB.2==0){}
; 0000 0105                     key_pressed=7;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0106                 }
; 0000 0107             }
;PCODE: $000001B1 VOL: 0
; 0000 0108 
; 0000 0109      if(PINB.3==0)
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 010A             {
; 0000 010B             delay_ms(100);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 010C             if(PINB.3==0)
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 010D                 {
; 0000 010E                     //while (PINB.3==0){}
; 0000 010F                     key_pressed=10;  //      *
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0110                 }
; 0000 0111             }
;PCODE: $000001BE VOL: 0
; 0000 0112 
; 0000 0113 
; 0000 0114 
; 0000 0115       PORTA=0XFD;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0116       if(PINB.0==0)
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0117             {
; 0000 0118             delay_ms(100);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0119             if(PINB.0==0)
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 011A                 {
; 0000 011B                     //while (PINB.0==0){}
; 0000 011C                     key_pressed=2;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 011D                 }
; 0000 011E             }
;PCODE: $000001CD VOL: 0
; 0000 011F      if(PINB.1==0)
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0120             {
; 0000 0121             delay_ms(100);
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0122             if(PINB.1==0)
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0123                 {
; 0000 0124                     //while (PINB.1==0){}
; 0000 0125                     key_pressed=5;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0126                 }
; 0000 0127             }
;PCODE: $000001DA VOL: 0
; 0000 0128 
; 0000 0129      if(PINB.2==0)
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 012A             {
; 0000 012B             delay_ms(100);
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 012C             if(PINB.2==0)
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 012D                 {
; 0000 012E                     //while (PINB.2==0){}
; 0000 012F                     key_pressed=8;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0130                 }
; 0000 0131             }
;PCODE: $000001E7 VOL: 0
; 0000 0132 
; 0000 0133      if(PINB.3==0)
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0134             {
; 0000 0135             delay_ms(100);
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0136             if(PINB.3==0)
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0137                 {
; 0000 0138                     //while (PINB.2==0){}
; 0000 0139                     key_pressed=0;
;PCODE: $000001F2 VOL: 0
; 0000 013A                 }
; 0000 013B             }
;PCODE: $000001F3 VOL: 0
; 0000 013C 
; 0000 013D       PORTA=0XFB;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 013E       if(PINB.0==0)
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 013F             {
; 0000 0140             delay_ms(100);
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0141             if(PINB.0==0)
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0142                 {
; 0000 0143                     //while (PINB.0==0){}
; 0000 0144                     key_pressed=3;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0145                 }
; 0000 0146             }
;PCODE: $00000202 VOL: 0
; 0000 0147      if(PINB.1==0)
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0148             {
; 0000 0149             delay_ms(100);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 014A             if(PINB.1==0)
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 014B                 {
; 0000 014C                     //while (PINB.1==0){}
; 0000 014D                     key_pressed=6;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 014E                 }
; 0000 014F             }
;PCODE: $0000020F VOL: 0
; 0000 0150 
; 0000 0151      if(PINB.2==0)
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0152             {
; 0000 0153             delay_ms(100);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0154             if(PINB.2==0)
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0155                 {
; 0000 0156                     //while (PINB.2==0){}
; 0000 0157                     key_pressed=9;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0158                 }
; 0000 0159             }
;PCODE: $0000021C VOL: 0
; 0000 015A 
; 0000 015B      if(PINB.3==0)
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 015C             {
; 0000 015D             delay_ms(100);
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 015E             if(PINB.3==0)
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 015F                 {
; 0000 0160                    // while (PINB.3==0){}
; 0000 0161                     key_pressed=11;   //     #
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0162                 }
; 0000 0163             }
;PCODE: $00000229 VOL: 0
; 0000 0164        if(key_pressed!=50){
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0165        send_number(key_pressed);  }
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0166        PORTA=0XF0;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0167 
; 0000 0168 
; 0000 0169 
; 0000 016A }
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;
;void main(void)
; 0000 016D {
;PCODE: $00000235 VOL: 0
; 0000 016E // Declare your local variables here
; 0000 016F 
; 0000 0170 // Input/Output Ports initialization
; 0000 0171 // Port A initialization
; 0000 0172 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 0173 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0174 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 0175 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0176 
; 0000 0177 // Port B initialization
; 0000 0178 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0179 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 017A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 017B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 017C 
; 0000 017D // Port C initialization
; 0000 017E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 017F DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0180 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0181 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0182 
; 0000 0183 // Port D initialization
; 0000 0184 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=In
; 0000 0185 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0186 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=P Bit1=0 Bit0=T
; 0000 0187 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0188 
; 0000 0189 
; 0000 018A // External Interrupt(s) initialization
; 0000 018B // INT0: On
; 0000 018C // INT0 Mode: Falling Edge
; 0000 018D // INT1: On
; 0000 018E // INT1 Mode: Falling Edge
; 0000 018F // INT2: Off
; 0000 0190 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 0191 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 0192 MCUCSR=(0<<ISC2);
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0193 GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0194 
; 0000 0195 
; 0000 0196 // USART initialization
; 0000 0197 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0198 // USART Receiver: Off
; 0000 0199 // USART Transmitter: On
; 0000 019A // USART Mode: Asynchronous
; 0000 019B // USART Baud Rate: 9600
; 0000 019C UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 019D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 019E UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 019F UBRRH=0x00;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 01A0 UBRRL=0x33;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 01A1 
; 0000 01A2 // Global enable interrupts
; 0000 01A3 #asm("sei")
;PCODE: $00000259 VOL: 0
	sei
;PCODE: $0000025A VOL: 0
; 0000 01A4 show_msg(str_id);
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 01A5 while (1)
;PCODE: $0000025D VOL: 0
; 0000 01A6       {
; 0000 01A7       if ((PINB&0x0F) != 0x0F){
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 01A8             GET_KEY();
;PCODE: $00000262 VOL: 0
; 0000 01A9             //PORTA.4 = ~PORTA.4;
; 0000 01AA             delay_ms(200);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 01AB       }
; 0000 01AC       }
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 01AD }
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
