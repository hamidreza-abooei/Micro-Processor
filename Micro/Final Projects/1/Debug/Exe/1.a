;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/27/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;unsigned char rx_buffer[7];
;unsigned char rx_counter=0;
;unsigned char password[] = "9733002";

	.DSEG
;int i;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A char status,data;
; 0000 002B status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002C data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002E    {
; 0000 002F     if (data != 0x0D)  {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0030         if(data == 0x08){   //backslash
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0031            rx_counter--;
;PCODE: $0000001E VOL: 0
; 0000 0032         }else if (rx_counter == 7){
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0033             rx_counter = 6;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0034             for (i=0;i<6;i++){
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0035                rx_buffer[i]=rx_buffer[i+1];
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0036             }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0037             rx_buffer[rx_counter]=data;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0038             rx_counter++;
;PCODE: $00000040 VOL: 0
; 0000 0039         }else{
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003A             rx_buffer[rx_counter]=data;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 003B             rx_counter++;
;PCODE: $00000047 VOL: 0
; 0000 003C         }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 003D     }else{
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003E       unsigned char flag = 0;
; 0000 003F 
; 0000 0040       for (i=0;i<7;i++){
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;	flag -> Y+0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0041         //PORTA =  rx_buffer[i];
; 0000 0042         //PORTC =   password[i];
; 0000 0043         if (rx_buffer[i] != password[i]){
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0044           flag = 1;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0045           //PORTA.0 = ~PORTA.0;
; 0000 0046           break;
;PCODE: $00000062 VOL: 0
; 0000 0047         }
; 0000 0048       }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0049       if (flag == 0){
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 004A          SPDR = 0x55;   //true
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 004B       }else{
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 004C          SPDR = 0xAA;   //false
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004D       }
;PCODE: $00000073 VOL: 0
; 0000 004E 
; 0000 004F     }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0050 
; 0000 0051    }
; 0000 0052 }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// SPI functions
;#include <spi.h>
;
;void main(void)
; 0000 005D {
;PCODE: $0000007B VOL: 0
; 0000 005E // Declare your local variables here
; 0000 005F 
; 0000 0060 // Input/Output Ports initialization
; 0000 0061 // Port A initialization
; 0000 0062 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0063 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0064 //DDRA  =0xff;
; 0000 0065 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0066 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0067 
; 0000 0068 // Port B initialization
; 0000 0069 // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006A DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 006B // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006D 
; 0000 006E // Port C initialization
; 0000 006F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0070 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0071 //DDRC = 0XFF;
; 0000 0072 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0073 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0074 
; 0000 0075 // Port D initialization
; 0000 0076 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0077 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0078 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0079 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 007A 
; 0000 007B 
; 0000 007C 
; 0000 007D 
; 0000 007E 
; 0000 007F 
; 0000 0080 // USART initialization
; 0000 0081 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0082 // USART Receiver: On
; 0000 0083 // USART Transmitter: Off
; 0000 0084 // USART Mode: Asynchronous
; 0000 0085 // USART Baud Rate: 9600
; 0000 0086 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0087 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0088 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0089 UBRRH=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 008A UBRRL=0x33;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 008B 
; 0000 008C // Analog Comparator initialization
; 0000 008D // Analog Comparator: Off
; 0000 008E // The Analog Comparator's positive input is
; 0000 008F // connected to the AIN0 pin
; 0000 0090 // The Analog Comparator's negative input is
; 0000 0091 // connected to the AIN1 pin
; 0000 0092 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0093 SFIOR=(0<<ACME);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0094 
; 0000 0095 
; 0000 0096 // SPI initialization
; 0000 0097 // SPI Type: Master
; 0000 0098 // SPI Clock Rate: 2000.000 kHz
; 0000 0099 // SPI Clock Phase: Cycle Start
; 0000 009A // SPI Clock Polarity: Low
; 0000 009B // SPI Data Order: MSB First
; 0000 009C SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 009D SPSR=(0<<SPI2X);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 009E 
; 0000 009F // Global enable interrupts
; 0000 00A0 #asm("sei")
;PCODE: $0000009E VOL: 0
	sei
;PCODE: $0000009F VOL: 0
; 0000 00A1 
; 0000 00A2 while (1)
;PCODE: $000000A0 VOL: 0
; 0000 00A3       {
; 0000 00A4       // Place your code here
; 0000 00A5 
; 0000 00A6       }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00A7 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
