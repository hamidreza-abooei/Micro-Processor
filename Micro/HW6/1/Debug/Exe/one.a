;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : HW6-1
;Version :
;Date    : 6/1/2022
;Author  : Hamidreza Abooei
;Company : Amirkabir
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;// Standard Input/Output functions
;#include <stdio.h>
;unsigned char flag = 0;
;unsigned char temph = 0;
;unsigned char templ = 0;
;// Timer1 input capture interrupt service routine
;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
; 0000 0022 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0023     TCNT1H = 0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0024     TCNT1L = 0x11;              //
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0025 
; 0000 0026     if (flag == 1){
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0027         templ = ICR1L;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0028         temph = ICR1H;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0029         //if((UCSRA&1<<RXC))
; 0000 002A         //{
; 0000 002B //            UDR = temph >> 4;
; 0000 002C //            while(!(UCSRA&1<<UDRE));
; 0000 002D //            UDR = (temph & 0xF);
; 0000 002E //            while(!(UCSRA&1<<UDRE));
; 0000 002F //            UDR = (templ >> 4);
; 0000 0030 //            while(!(UCSRA&1<<UDRE));
; 0000 0031 //            UDR = (templ & 0xF);
; 0000 0032 //            while(!(UCSRA&1<<UDRE));
; 0000 0033 
; 0000 0034             UDR = temph;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0035             while(!(UCSRA&1<<UDRE));
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0036             UDR = templ;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0037             while(!(UCSRA&1<<UDRE));
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0038         //}
; 0000 0039 
; 0000 003A         //UDR = templ;
; 0000 003B         PORTA = temph;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003C         PORTB = templ;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003D         flag = 2;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003E     }
; 0000 003F     if (flag == 0)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0040         flag = 1;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0041 
; 0000 0042 }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;void main(void)
; 0000 0045 {
;PCODE: $00000039 VOL: 0
; 0000 0046 
; 0000 0047 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0048 DDRB=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0049 
; 0000 004A 
; 0000 004B // Timer/Counter 1 initialization
; 0000 004C // Clock source: System Clock
; 0000 004D // Clock value: 1000.000 kHz
; 0000 004E // Mode: Normal top=0xFFFF
; 0000 004F // OC1A output: Disconnected
; 0000 0050 // OC1B output: Disconnected
; 0000 0051 // Noise Canceler: Off
; 0000 0052 // Input Capture on Falling Edge
; 0000 0053 // Timer Period: 65.536 ms
; 0000 0054 // Timer1 Overflow Interrupt: Off
; 0000 0055 // Input Capture Interrupt: On
; 0000 0056 // Compare A Match Interrupt: Off
; 0000 0057 // Compare B Match Interrupt: Off
; 0000 0058 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0059 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 005A TCNT1H=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 005B TCNT1L=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005C ICR1H=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 005D ICR1L=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005E OCR1AH=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 005F OCR1AL=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0060 OCR1BH=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0061 OCR1BL=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0062 
; 0000 0063 
; 0000 0064 
; 0000 0065 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0066 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (1<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0067 
; 0000 0068 
; 0000 0069 // USART initialization
; 0000 006A // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 006B // USART Receiver: Off
; 0000 006C // USART Transmitter: On
; 0000 006D // USART Mode: Asynchronous
; 0000 006E // USART Baud Rate: 4800
; 0000 006F UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0070 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0071 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0072 UBRRH=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0073 UBRRL=0x0C;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0074 
; 0000 0075 // Global enable interrupts
; 0000 0076 #asm("sei")
;PCODE: $0000005E VOL: 0
	sei
;PCODE: $0000005F VOL: 0
; 0000 0077 
; 0000 0078 while (1)
;PCODE: $00000060 VOL: 0
; 0000 0079       {
; 0000 007A 
; 0000 007B 
; 0000 007C       }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007D }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
