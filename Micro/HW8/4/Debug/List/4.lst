
AVRASM ver. 2.1.30  D:\term8\Micro\HWs\HW8\4\Debug\List\4.asm Wed Jun 22 02:05:02 2022

D:\term8\Micro\HWs\HW8\4\Debug\List\4.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\term8\Micro\HWs\HW8\4\Debug\List\4.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\term8\Micro\HWs\HW8\4\Debug\List\4.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _thigh=R5
                 	.DEF _tlow=R4
                 	.DEF _adc_select=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
D:\term8\Micro\HWs\HW8\4\Debug\List\4.asm(1123): warning: .cseg .db misalignment - padding zero byte
00002a 0000      	.DB  0x0
                 
                 
                 __GLOBAL_INI_TBL:
00002b 0001      	.DW  0x01
00002c 0007      	.DW  0x07
00002d 0054      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00002e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000042 e5e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000043 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000044 9185      	LPM  R24,Z+
000045 9195      	LPM  R25,Z+
000046 9700      	SBIW R24,0
000047 f061      	BREQ __GLOBAL_INI_END
000048 91a5      	LPM  R26,Z+
000049 91b5      	LPM  R27,Z+
00004a 9005      	LPM  R0,Z+
00004b 9015      	LPM  R1,Z+
00004c 01bf      	MOVW R22,R30
00004d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004e 9005      	LPM  R0,Z+
00004f 920d      	ST   X+,R0
000050 9701      	SBIW R24,1
000051 f7e1      	BRNE __GLOBAL_INI_LOOP
000052 01fb      	MOVW R30,R22
000053 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000054 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000055 bfed      	OUT  SPL,R30
000056 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000057 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000058 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000059 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005a 940c 010b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ; * 4.c
                 ; *
                 ; * Created: 6/22/2022 1:30:21 AM
                 ; * Author: Hamidreza
                 ; */
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#define ADC_INIT ((1<<REFS0) | (1<<ADLAR))
                 ;unsigned char thigh,tlow ;
                 ;float temp ;
                 ;unsigned char adc_select = 0;
                 ;
                 ;
                 ;void display (void){
                 ; 0000 0010 void display (void){
                 
                 	.CSEG
                 _display:
                 ; .FSTART _display
                 ; 0000 0011     thigh = (char) temp ;
00005c 91e0 0260 	LDS  R30,_temp
00005e 91f0 0261 	LDS  R31,_temp+1
000060 9160 0262 	LDS  R22,_temp+2
000062 9170 0263 	LDS  R23,_temp+3
000064 940e 0167 	CALL __CFD1U
000066 2e5e      	MOV  R5,R30
                 ; 0000 0012     tlow = ((char)(temp*10))%10;
000067 d0bb      	RCALL SUBOPT_0x0
                +
000068 e0e0     +LDI R30 , LOW ( 0x41200000 )
000069 e0f0     +LDI R31 , HIGH ( 0x41200000 )
00006a e260     +LDI R22 , BYTE3 ( 0x41200000 )
00006b e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
00006c 940e 01ce 	CALL __MULF12
00006e 940e 0167 	CALL __CFD1U
000070 27ff      	CLR  R31
000071 2766      	CLR  R22
000072 2777      	CLR  R23
000073 e0f0      	LDI  R31,0
000074 01df      	MOVW R26,R30
000075 e0ea      	LDI  R30,LOW(10)
000076 e0f0      	LDI  R31,HIGH(10)
000077 940e 0286 	CALL __MODW21
000079 2e4e      	MOV  R4,R30
                 ; 0000 0013     PORTC = (thigh * 0x10) | (tlow);
00007a 2de5      	MOV  R30,R5
00007b e1a0      	LDI  R26,LOW(16)
00007c 02ea      	MULS R30,R26
00007d 01f0      	MOVW R30,R0
00007e 29e4      	OR   R30,R4
00007f bbe5      	OUT  0x15,R30
                 ; 0000 0014 
                 ; 0000 0015 }
000080 9508      	RET
                 ; .FEND
                 ;
                 ;void ADC_run(void){
                 ; 0000 0017 void ADC_run(void){
                 _ADC_run:
                 ; .FSTART _ADC_run
                 ; 0000 0018 
                 ; 0000 0019     ADCSRA|=(1<<ADSC);
000081 9a36      	SBI  0x6,6
                 ; 0000 001A     while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000082 9b34      	SBIS 0x6,4
000083 cffe      	RJMP _0x3
                 ; 0000 001B     ADCSRA|=(1<<ADIF);
000084 9a34      	SBI  0x6,4
                 ; 0000 001C     temp = ADCH;
000085 b1e5      	IN   R30,0x5
000086 e6a0      	LDI  R26,LOW(_temp)
000087 e0b2      	LDI  R27,HIGH(_temp)
000088 27ff      	CLR  R31
000089 2766      	CLR  R22
00008a 2777      	CLR  R23
00008b 940e 01a0 	CALL __CDF1
00008d 940e 0294 	CALL __PUTDP1
                 ; 0000 001D     temp = (temp * 5.0)/255.0;
00008f d093      	RCALL SUBOPT_0x0
                +
000090 e0e0     +LDI R30 , LOW ( 0x40A00000 )
000091 e0f0     +LDI R31 , HIGH ( 0x40A00000 )
000092 ea60     +LDI R22 , BYTE3 ( 0x40A00000 )
000093 e470     +LDI R23 , BYTE4 ( 0x40A00000 )
                 	__GETD1N 0x40A00000
000094 940e 01ce 	CALL __MULF12
000096 01df      	MOVW R26,R30
000097 01cb      	MOVW R24,R22
                +
000098 e0e0     +LDI R30 , LOW ( 0x437F0000 )
000099 e0f0     +LDI R31 , HIGH ( 0x437F0000 )
00009a e76f     +LDI R22 , BYTE3 ( 0x437F0000 )
00009b e473     +LDI R23 , BYTE4 ( 0x437F0000 )
                 	__GETD1N 0x437F0000
00009c 940e 021c 	CALL __DIVF21
00009e 93e0 0260 	STS  _temp,R30
0000a0 93f0 0261 	STS  _temp+1,R31
0000a2 9360 0262 	STS  _temp+2,R22
0000a4 9370 0263 	STS  _temp+3,R23
                 ; 0000 001E 
                 ; 0000 001F 
                 ; 0000 0020     display();
0000a6 dfb5      	RCALL _display
                 ; 0000 0021 
                 ; 0000 0022 
                 ; 0000 0023 }
0000a7 9508      	RET
                 ; .FEND
                 ;
                 ;void GET_KEY (void){
                 ; 0000 0025 void GET_KEY (void){
                 _GET_KEY:
                 ; .FSTART _GET_KEY
                 ; 0000 0026     PORTD=0XFE;
0000a8 efee      	LDI  R30,LOW(254)
0000a9 bbe2      	OUT  0x12,R30
                 ; 0000 0027     if(PIND.4==0)
0000aa 9984      	SBIC 0x10,4
0000ab c007      	RJMP _0x6
                 ; 0000 0028             {
                 ; 0000 0029             delay_ms(100);
0000ac d07f      	RCALL SUBOPT_0x1
                 ; 0000 002A             if(PIND.4==0)
0000ad 9984      	SBIC 0x10,4
0000ae c004      	RJMP _0x7
                 ; 0000 002B                 {
                 ; 0000 002C                     while (PIND.4==0){}
                 _0x8:
0000af 9b84      	SBIS 0x10,4
0000b0 cffe      	RJMP _0x8
                 ; 0000 002D                     adc_select=1;
0000b1 e0e1      	LDI  R30,LOW(1)
0000b2 2e7e      	MOV  R7,R30
                 ; 0000 002E                 }
                 ; 0000 002F             }
                 _0x7:
                 ; 0000 0030      if(PIND.5==0)
                 _0x6:
0000b3 9985      	SBIC 0x10,5
0000b4 c007      	RJMP _0xB
                 ; 0000 0031             {
                 ; 0000 0032             delay_ms(100);
0000b5 d076      	RCALL SUBOPT_0x1
                 ; 0000 0033             if(PIND.5==0)
0000b6 9985      	SBIC 0x10,5
0000b7 c004      	RJMP _0xC
                 ; 0000 0034                 {
                 ; 0000 0035                     while (PIND.5==0){}
                 _0xD:
0000b8 9b85      	SBIS 0x10,5
0000b9 cffe      	RJMP _0xD
                 ; 0000 0036                     adc_select=4;
0000ba e0e4      	LDI  R30,LOW(4)
0000bb 2e7e      	MOV  R7,R30
                 ; 0000 0037                 }
                 ; 0000 0038             }
                 _0xC:
                 ; 0000 0039 
                 ; 0000 003A      if(PIND.6==0)
                 _0xB:
0000bc 9986      	SBIC 0x10,6
0000bd c007      	RJMP _0x10
                 ; 0000 003B             {
                 ; 0000 003C             delay_ms(100);
0000be d06d      	RCALL SUBOPT_0x1
                 ; 0000 003D             if(PIND.6==0)
0000bf 9986      	SBIC 0x10,6
0000c0 c004      	RJMP _0x11
                 ; 0000 003E                 {
                 ; 0000 003F                     while (PIND.6==0){}
                 _0x12:
0000c1 9b86      	SBIS 0x10,6
0000c2 cffe      	RJMP _0x12
                 ; 0000 0040                     adc_select=7;
0000c3 e0e7      	LDI  R30,LOW(7)
0000c4 2e7e      	MOV  R7,R30
                 ; 0000 0041                 }
                 ; 0000 0042             }
                 _0x11:
                 ; 0000 0043 
                 ; 0000 0044 
                 ; 0000 0045 
                 ; 0000 0046       PORTD=0XFD;
                 _0x10:
0000c5 efed      	LDI  R30,LOW(253)
0000c6 bbe2      	OUT  0x12,R30
                 ; 0000 0047       if(PIND.4==0)
0000c7 9984      	SBIC 0x10,4
0000c8 c007      	RJMP _0x15
                 ; 0000 0048             {
                 ; 0000 0049             delay_ms(100);
0000c9 d062      	RCALL SUBOPT_0x1
                 ; 0000 004A             if(PIND.4==0)
0000ca 9984      	SBIC 0x10,4
0000cb c004      	RJMP _0x16
                 ; 0000 004B                 {
                 ; 0000 004C                     while (PIND.4==0){}
                 _0x17:
0000cc 9b84      	SBIS 0x10,4
0000cd cffe      	RJMP _0x17
                 ; 0000 004D                     adc_select=2;
0000ce e0e2      	LDI  R30,LOW(2)
0000cf 2e7e      	MOV  R7,R30
                 ; 0000 004E                 }
                 ; 0000 004F             }
                 _0x16:
                 ; 0000 0050      if(PIND.5==0)
                 _0x15:
0000d0 9985      	SBIC 0x10,5
0000d1 c007      	RJMP _0x1A
                 ; 0000 0051             {
                 ; 0000 0052             delay_ms(100);
0000d2 d059      	RCALL SUBOPT_0x1
                 ; 0000 0053             if(PIND.5==0)
0000d3 9985      	SBIC 0x10,5
0000d4 c004      	RJMP _0x1B
                 ; 0000 0054                 {
                 ; 0000 0055                     while (PIND.5==0){}
                 _0x1C:
0000d5 9b85      	SBIS 0x10,5
0000d6 cffe      	RJMP _0x1C
                 ; 0000 0056                     adc_select=5;
0000d7 e0e5      	LDI  R30,LOW(5)
0000d8 2e7e      	MOV  R7,R30
                 ; 0000 0057                 }
                 ; 0000 0058             }
                 _0x1B:
                 ; 0000 0059 
                 ; 0000 005A      if(PIND.6==0)
                 _0x1A:
0000d9 9986      	SBIC 0x10,6
0000da c006      	RJMP _0x1F
                 ; 0000 005B             {
                 ; 0000 005C             delay_ms(100);
0000db d050      	RCALL SUBOPT_0x1
                 ; 0000 005D             if(PIND.6==0)
0000dc 9986      	SBIC 0x10,6
0000dd c003      	RJMP _0x20
                 ; 0000 005E                 {
                 ; 0000 005F                     while (PIND.6==0){}
                 _0x21:
0000de 9b86      	SBIS 0x10,6
0000df cffe      	RJMP _0x21
                 ; 0000 0060                     adc_select=0;
0000e0 2477      	CLR  R7
                 ; 0000 0061                 }
                 ; 0000 0062             }
                 _0x20:
                 ; 0000 0063 
                 ; 0000 0064       PORTD=0XFB;
                 _0x1F:
0000e1 efeb      	LDI  R30,LOW(251)
0000e2 bbe2      	OUT  0x12,R30
                 ; 0000 0065       if(PIND.4==0)
0000e3 9984      	SBIC 0x10,4
0000e4 c007      	RJMP _0x24
                 ; 0000 0066             {
                 ; 0000 0067             delay_ms(100);
0000e5 d046      	RCALL SUBOPT_0x1
                 ; 0000 0068             if(PIND.4==0)
0000e6 9984      	SBIC 0x10,4
0000e7 c004      	RJMP _0x25
                 ; 0000 0069                 {
                 ; 0000 006A                     while (PIND.4==0){}
                 _0x26:
0000e8 9b84      	SBIS 0x10,4
0000e9 cffe      	RJMP _0x26
                 ; 0000 006B                     adc_select=3;
0000ea e0e3      	LDI  R30,LOW(3)
0000eb 2e7e      	MOV  R7,R30
                 ; 0000 006C                 }
                 ; 0000 006D             }
                 _0x25:
                 ; 0000 006E      if(PIND.5==0)
                 _0x24:
0000ec 9985      	SBIC 0x10,5
0000ed c007      	RJMP _0x29
                 ; 0000 006F             {
                 ; 0000 0070             delay_ms(100);
0000ee d03d      	RCALL SUBOPT_0x1
                 ; 0000 0071             if(PIND.5==0)
0000ef 9985      	SBIC 0x10,5
0000f0 c004      	RJMP _0x2A
                 ; 0000 0072                 {
                 ; 0000 0073                     while (PIND.5==0){}
                 _0x2B:
0000f1 9b85      	SBIS 0x10,5
0000f2 cffe      	RJMP _0x2B
                 ; 0000 0074                     adc_select=6;
0000f3 e0e6      	LDI  R30,LOW(6)
0000f4 2e7e      	MOV  R7,R30
                 ; 0000 0075                 }
                 ; 0000 0076             }
                 _0x2A:
                 ; 0000 0077 
                 ; 0000 0078      if(PIND.6==0)
                 _0x29:
0000f5 9986      	SBIC 0x10,6
0000f6 c011      	RJMP _0x2E
                 ; 0000 0079             {
                 ; 0000 007A             delay_ms(100);
0000f7 d034      	RCALL SUBOPT_0x1
                 ; 0000 007B             if(PIND.6==0)
0000f8 9986      	SBIC 0x10,6
0000f9 c00e      	RJMP _0x2F
                 ; 0000 007C                 {
                 ; 0000 007D                     while (PIND.6==0){}
                 _0x30:
0000fa 9b86      	SBIS 0x10,6
0000fb cffe      	RJMP _0x30
                 ; 0000 007E                     ADMUX =ADC_INIT | adc_select;
0000fc 2de7      	MOV  R30,R7
0000fd 66e0      	ORI  R30,LOW(0x60)
0000fe b9e7      	OUT  0x7,R30
                 ; 0000 007F                     delay_us(10);
                +
0000ff e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000100 958a     +DEC R24
000101 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0080                     PORTD.7=~PORTD.7;
000102 9b97      	SBIS 0x12,7
000103 c002      	RJMP _0x33
000104 9897      	CBI  0x12,7
000105 c001      	RJMP _0x34
                 _0x33:
000106 9a97      	SBI  0x12,7
                 _0x34:
                 ; 0000 0081                     ADC_run();
000107 df79      	RCALL _ADC_run
                 ; 0000 0082                 }
                 ; 0000 0083             }
                 _0x2F:
                 ; 0000 0084 
                 ; 0000 0085         PORTD=0XF0;
                 _0x2E:
000108 efe0      	LDI  R30,LOW(240)
000109 bbe2      	OUT  0x12,R30
                 ; 0000 0086 
                 ; 0000 0087 
                 ; 0000 0088 
                 ; 0000 0089 }
00010a 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void){
                 ; 0000 008C void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 008D     DDRA = 0;
00010b e0e0      	LDI  R30,LOW(0)
00010c bbea      	OUT  0x1A,R30
                 ; 0000 008E     DDRC = 0xFF;
00010d efef      	LDI  R30,LOW(255)
00010e bbe4      	OUT  0x14,R30
                 ; 0000 008F     DDRD = 0x0f;
00010f e0ef      	LDI  R30,LOW(15)
000110 bbe1      	OUT  0x11,R30
                 ; 0000 0090     PORTD = 0xF0;
000111 efe0      	LDI  R30,LOW(240)
000112 bbe2      	OUT  0x12,R30
                 ; 0000 0091 
                 ; 0000 0092     ADMUX = ADC_INIT ;
000113 e6e0      	LDI  R30,LOW(96)
000114 b9e7      	OUT  0x7,R30
                 ; 0000 0093     ADCSRA = (1<<ADEN)| (0<<ADSC)| (0<<ADATE)| (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1);
000115 e8e6      	LDI  R30,LOW(134)
000116 b9e6      	OUT  0x6,R30
                 ; 0000 0094 
                 ; 0000 0095 
                 ; 0000 0096     while (1){
                 _0x35:
                 ; 0000 0097         if((PIND & 0x70) != 0x70){
000117 b3e0      	IN   R30,0x10
000118 77e0      	ANDI R30,LOW(0x70)
000119 37e0      	CPI  R30,LOW(0x70)
00011a f031      	BREQ _0x38
                 ; 0000 0098             GET_KEY();
00011b df8c      	RCALL _GET_KEY
                 ; 0000 0099             PORTD.7=~PORTD.7;
00011c 9b97      	SBIS 0x12,7
00011d c002      	RJMP _0x39
00011e 9897      	CBI  0x12,7
00011f c001      	RJMP _0x3A
                 _0x39:
000120 9a97      	SBI  0x12,7
                 _0x3A:
                 ; 0000 009A         }
                 ; 0000 009B 
                 ; 0000 009C     }
                 _0x38:
000121 cff5      	RJMP _0x35
                 ; 0000 009D }
                 _0x3B:
000122 cfff      	RJMP _0x3B
                 ; .FEND
                 ;
                 
                 	.DSEG
                 _temp:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000123 91a0 0260 	LDS  R26,_temp
000125 91b0 0261 	LDS  R27,_temp+1
000127 9180 0262 	LDS  R24,_temp+2
000129 9190 0263 	LDS  R25,_temp+3
00012b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
00012c e6a4      	LDI  R26,LOW(100)
00012d e0b0      	LDI  R27,0
00012e 940c 0130 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
000130 9610      	adiw r26,0
000131 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000132 ed80     +LDI R24 , LOW ( 0x7D0 )
000133 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000134 9701     +SBIW R24 , 1
000135 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000136 95a8      	wdr
000137 9711      	sbiw r26,1
000138 f7c9      	brne __delay_ms0
                 __delay_ms1:
000139 9508      	ret
                 
                 __ROUND_REPACK:
00013a 2355      	TST  R21
00013b f442      	BRPL __REPACK
00013c 3850      	CPI  R21,0x80
00013d f411      	BRNE __ROUND_REPACK0
00013e ffe0      	SBRS R30,0
00013f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000140 9631      	ADIW R30,1
000141 1f69      	ADC  R22,R25
000142 1f79      	ADC  R23,R25
000143 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000144 e850      	LDI  R21,0x80
000145 2757      	EOR  R21,R23
000146 f411      	BRNE __REPACK0
000147 935f      	PUSH R21
000148 c073      	RJMP __ZERORES
                 __REPACK0:
000149 3f5f      	CPI  R21,0xFF
00014a f031      	BREQ __REPACK1
00014b 0f66      	LSL  R22
00014c 0c00      	LSL  R0
00014d 9557      	ROR  R21
00014e 9567      	ROR  R22
00014f 2f75      	MOV  R23,R21
000150 9508      	RET
                 __REPACK1:
000151 935f      	PUSH R21
000152 2000      	TST  R0
000153 f00a      	BRMI __REPACK2
000154 c073      	RJMP __MAXRES
                 __REPACK2:
000155 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000156 e850      	LDI  R21,0x80
000157 2e19      	MOV  R1,R25
000158 2215      	AND  R1,R21
000159 0f88      	LSL  R24
00015a 1f99      	ROL  R25
00015b 2795      	EOR  R25,R21
00015c 0f55      	LSL  R21
00015d 9587      	ROR  R24
                 
                 __UNPACK1:
00015e e850      	LDI  R21,0x80
00015f 2e07      	MOV  R0,R23
000160 2205      	AND  R0,R21
000161 0f66      	LSL  R22
000162 1f77      	ROL  R23
000163 2775      	EOR  R23,R21
000164 0f55      	LSL  R21
000165 9567      	ROR  R22
000166 9508      	RET
                 
                 __CFD1U:
000167 9468      	SET
000168 c001      	RJMP __CFD1U0
                 __CFD1:
000169 94e8      	CLT
                 __CFD1U0:
00016a 935f      	PUSH R21
00016b dff2      	RCALL __UNPACK1
00016c 3870      	CPI  R23,0x80
00016d f018      	BRLO __CFD10
00016e 3f7f      	CPI  R23,0xFF
00016f f408      	BRCC __CFD10
000170 c04b      	RJMP __ZERORES
                 __CFD10:
000171 e156      	LDI  R21,22
000172 1b57      	SUB  R21,R23
000173 f4aa      	BRPL __CFD11
000174 9551      	NEG  R21
000175 3058      	CPI  R21,8
000176 f40e      	BRTC __CFD19
000177 3059      	CPI  R21,9
                 __CFD19:
000178 f030      	BRLO __CFD17
000179 efef      	SER  R30
00017a efff      	SER  R31
00017b ef6f      	SER  R22
00017c e77f      	LDI  R23,0x7F
00017d f977      	BLD  R23,7
00017e c01a      	RJMP __CFD15
                 __CFD17:
00017f 2777      	CLR  R23
000180 2355      	TST  R21
000181 f0b9      	BREQ __CFD15
                 __CFD18:
000182 0fee      	LSL  R30
000183 1fff      	ROL  R31
000184 1f66      	ROL  R22
000185 1f77      	ROL  R23
000186 955a      	DEC  R21
000187 f7d1      	BRNE __CFD18
000188 c010      	RJMP __CFD15
                 __CFD11:
000189 2777      	CLR  R23
                 __CFD12:
00018a 3058      	CPI  R21,8
00018b f028      	BRLO __CFD13
00018c 2fef      	MOV  R30,R31
00018d 2ff6      	MOV  R31,R22
00018e 2f67      	MOV  R22,R23
00018f 5058      	SUBI R21,8
000190 cff9      	RJMP __CFD12
                 __CFD13:
000191 2355      	TST  R21
000192 f031      	BREQ __CFD15
                 __CFD14:
000193 9576      	LSR  R23
000194 9567      	ROR  R22
000195 95f7      	ROR  R31
000196 95e7      	ROR  R30
000197 955a      	DEC  R21
000198 f7d1      	BRNE __CFD14
                 __CFD15:
000199 2000      	TST  R0
00019a f40a      	BRPL __CFD16
00019b d0c9      	RCALL __ANEGD1
                 __CFD16:
00019c 915f      	POP  R21
00019d 9508      	RET
                 
                 __CDF1U:
00019e 9468      	SET
00019f c001      	RJMP __CDF1U0
                 __CDF1:
0001a0 94e8      	CLT
                 __CDF1U0:
0001a1 9730      	SBIW R30,0
0001a2 4060      	SBCI R22,0
0001a3 4070      	SBCI R23,0
0001a4 f0b1      	BREQ __CDF10
0001a5 2400      	CLR  R0
0001a6 f026      	BRTS __CDF11
0001a7 2377      	TST  R23
0001a8 f412      	BRPL __CDF11
0001a9 9400      	COM  R0
0001aa d0ba      	RCALL __ANEGD1
                 __CDF11:
0001ab 2e17      	MOV  R1,R23
0001ac e17e      	LDI  R23,30
0001ad 2011      	TST  R1
                 __CDF12:
0001ae f032      	BRMI __CDF13
0001af 957a      	DEC  R23
0001b0 0fee      	LSL  R30
0001b1 1fff      	ROL  R31
0001b2 1f66      	ROL  R22
0001b3 1c11      	ROL  R1
0001b4 cff9      	RJMP __CDF12
                 __CDF13:
0001b5 2fef      	MOV  R30,R31
0001b6 2ff6      	MOV  R31,R22
0001b7 2d61      	MOV  R22,R1
0001b8 935f      	PUSH R21
0001b9 df8a      	RCALL __REPACK
0001ba 915f      	POP  R21
                 __CDF10:
0001bb 9508      	RET
                 
                 __ZERORES:
0001bc 27ee      	CLR  R30
0001bd 27ff      	CLR  R31
0001be 2766      	CLR  R22
0001bf 2777      	CLR  R23
0001c0 915f      	POP  R21
0001c1 9508      	RET
                 
                 __MINRES:
0001c2 efef      	SER  R30
0001c3 efff      	SER  R31
0001c4 e76f      	LDI  R22,0x7F
0001c5 ef7f      	SER  R23
0001c6 915f      	POP  R21
0001c7 9508      	RET
                 
                 __MAXRES:
0001c8 efef      	SER  R30
0001c9 efff      	SER  R31
0001ca e76f      	LDI  R22,0x7F
0001cb e77f      	LDI  R23,0x7F
0001cc 915f      	POP  R21
0001cd 9508      	RET
                 
                 __MULF12:
0001ce 935f      	PUSH R21
0001cf df86      	RCALL __UNPACK
0001d0 3870      	CPI  R23,0x80
0001d1 f351      	BREQ __ZERORES
0001d2 3890      	CPI  R25,0x80
0001d3 f341      	BREQ __ZERORES
0001d4 2401      	EOR  R0,R1
0001d5 9408      	SEC
0001d6 1f79      	ADC  R23,R25
0001d7 f423      	BRVC __MULF124
0001d8 f31c      	BRLT __ZERORES
                 __MULF125:
0001d9 2000      	TST  R0
0001da f33a      	BRMI __MINRES
0001db cfec      	RJMP __MAXRES
                 __MULF124:
0001dc 920f      	PUSH R0
0001dd 931f      	PUSH R17
0001de 932f      	PUSH R18
0001df 933f      	PUSH R19
0001e0 934f      	PUSH R20
0001e1 2711      	CLR  R17
0001e2 2722      	CLR  R18
0001e3 2799      	CLR  R25
0001e4 9f68      	MUL  R22,R24
0001e5 01a0      	MOVW R20,R0
0001e6 9f8f      	MUL  R24,R31
0001e7 2d30      	MOV  R19,R0
0001e8 0d41      	ADD  R20,R1
0001e9 1f59      	ADC  R21,R25
0001ea 9f6b      	MUL  R22,R27
0001eb 0d30      	ADD  R19,R0
0001ec 1d41      	ADC  R20,R1
0001ed 1f59      	ADC  R21,R25
0001ee 9f8e      	MUL  R24,R30
0001ef d027      	RCALL __MULF126
0001f0 9fbf      	MUL  R27,R31
0001f1 d025      	RCALL __MULF126
0001f2 9f6a      	MUL  R22,R26
0001f3 d023      	RCALL __MULF126
0001f4 9fbe      	MUL  R27,R30
0001f5 d01d      	RCALL __MULF127
0001f6 9faf      	MUL  R26,R31
0001f7 d01b      	RCALL __MULF127
0001f8 9fae      	MUL  R26,R30
0001f9 0d11      	ADD  R17,R1
0001fa 1f29      	ADC  R18,R25
0001fb 1f39      	ADC  R19,R25
0001fc 1f49      	ADC  R20,R25
0001fd 1f59      	ADC  R21,R25
0001fe 2fe3      	MOV  R30,R19
0001ff 2ff4      	MOV  R31,R20
000200 2f65      	MOV  R22,R21
000201 2f52      	MOV  R21,R18
000202 914f      	POP  R20
000203 913f      	POP  R19
000204 912f      	POP  R18
000205 911f      	POP  R17
000206 900f      	POP  R0
000207 2366      	TST  R22
000208 f02a      	BRMI __MULF122
000209 0f55      	LSL  R21
00020a 1fee      	ROL  R30
00020b 1fff      	ROL  R31
00020c 1f66      	ROL  R22
00020d c002      	RJMP __MULF123
                 __MULF122:
00020e 9573      	INC  R23
00020f f24b      	BRVS __MULF125
                 __MULF123:
000210 df29      	RCALL __ROUND_REPACK
000211 915f      	POP  R21
000212 9508      	RET
                 
                 __MULF127:
000213 0d10      	ADD  R17,R0
000214 1d21      	ADC  R18,R1
000215 1f39      	ADC  R19,R25
000216 c002      	RJMP __MULF128
                 __MULF126:
000217 0d20      	ADD  R18,R0
000218 1d31      	ADC  R19,R1
                 __MULF128:
000219 1f49      	ADC  R20,R25
00021a 1f59      	ADC  R21,R25
00021b 9508      	RET
                 
                 __DIVF21:
00021c 935f      	PUSH R21
00021d df38      	RCALL __UNPACK
00021e 3870      	CPI  R23,0x80
00021f f421      	BRNE __DIVF210
000220 2011      	TST  R1
                 __DIVF211:
000221 f40a      	BRPL __DIVF219
000222 cf9f      	RJMP __MINRES
                 __DIVF219:
000223 cfa4      	RJMP __MAXRES
                 __DIVF210:
000224 3890      	CPI  R25,0x80
000225 f409      	BRNE __DIVF218
                 __DIVF217:
000226 cf95      	RJMP __ZERORES
                 __DIVF218:
000227 2401      	EOR  R0,R1
000228 9408      	SEC
000229 0b97      	SBC  R25,R23
00022a f41b      	BRVC __DIVF216
00022b f3d4      	BRLT __DIVF217
00022c 2000      	TST  R0
00022d cff3      	RJMP __DIVF211
                 __DIVF216:
00022e 2f79      	MOV  R23,R25
00022f 931f      	PUSH R17
000230 932f      	PUSH R18
000231 933f      	PUSH R19
000232 934f      	PUSH R20
000233 2411      	CLR  R1
000234 2711      	CLR  R17
000235 2722      	CLR  R18
000236 2733      	CLR  R19
000237 2744      	CLR  R20
000238 2755      	CLR  R21
000239 e290      	LDI  R25,32
                 __DIVF212:
00023a 17ae      	CP   R26,R30
00023b 07bf      	CPC  R27,R31
00023c 0786      	CPC  R24,R22
00023d 0741      	CPC  R20,R17
00023e f030      	BRLO __DIVF213
00023f 1bae      	SUB  R26,R30
000240 0bbf      	SBC  R27,R31
000241 0b86      	SBC  R24,R22
000242 0b41      	SBC  R20,R17
000243 9408      	SEC
000244 c001      	RJMP __DIVF214
                 __DIVF213:
000245 9488      	CLC
                 __DIVF214:
000246 1f55      	ROL  R21
000247 1f22      	ROL  R18
000248 1f33      	ROL  R19
000249 1c11      	ROL  R1
00024a 1faa      	ROL  R26
00024b 1fbb      	ROL  R27
00024c 1f88      	ROL  R24
00024d 1f44      	ROL  R20
00024e 959a      	DEC  R25
00024f f751      	BRNE __DIVF212
000250 01f9      	MOVW R30,R18
000251 2d61      	MOV  R22,R1
000252 914f      	POP  R20
000253 913f      	POP  R19
000254 912f      	POP  R18
000255 911f      	POP  R17
000256 2366      	TST  R22
000257 f032      	BRMI __DIVF215
000258 0f55      	LSL  R21
000259 1fee      	ROL  R30
00025a 1fff      	ROL  R31
00025b 1f66      	ROL  R22
00025c 957a      	DEC  R23
00025d f243      	BRVS __DIVF217
                 __DIVF215:
00025e dedb      	RCALL __ROUND_REPACK
00025f 915f      	POP  R21
000260 9508      	RET
                 
                 __ANEGW1:
000261 95f1      	NEG  R31
000262 95e1      	NEG  R30
000263 40f0      	SBCI R31,0
000264 9508      	RET
                 
                 __ANEGD1:
000265 95f0      	COM  R31
000266 9560      	COM  R22
000267 9570      	COM  R23
000268 95e1      	NEG  R30
000269 4fff      	SBCI R31,-1
00026a 4f6f      	SBCI R22,-1
00026b 4f7f      	SBCI R23,-1
00026c 9508      	RET
                 
                 __CBD1:
00026d 2ffe      	MOV  R31,R30
00026e 0fff      	ADD  R31,R31
00026f 0bff      	SBC  R31,R31
000270 2f6f      	MOV  R22,R31
000271 2f7f      	MOV  R23,R31
000272 9508      	RET
                 
                 __DIVW21U:
000273 2400      	CLR  R0
000274 2411      	CLR  R1
000275 e190      	LDI  R25,16
                 __DIVW21U1:
000276 0faa      	LSL  R26
000277 1fbb      	ROL  R27
000278 1c00      	ROL  R0
000279 1c11      	ROL  R1
00027a 1a0e      	SUB  R0,R30
00027b 0a1f      	SBC  R1,R31
00027c f418      	BRCC __DIVW21U2
00027d 0e0e      	ADD  R0,R30
00027e 1e1f      	ADC  R1,R31
00027f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000280 60a1      	SBR  R26,1
                 __DIVW21U3:
000281 959a      	DEC  R25
000282 f799      	BRNE __DIVW21U1
000283 01fd      	MOVW R30,R26
000284 01d0      	MOVW R26,R0
000285 9508      	RET
                 
                 __MODW21:
000286 94e8      	CLT
000287 ffb7      	SBRS R27,7
000288 c004      	RJMP __MODW211
000289 95a0      	COM  R26
00028a 95b0      	COM  R27
00028b 9611      	ADIW R26,1
00028c 9468      	SET
                 __MODW211:
00028d fdf7      	SBRC R31,7
00028e dfd2      	RCALL __ANEGW1
00028f dfe3      	RCALL __DIVW21U
000290 01fd      	MOVW R30,R26
000291 f40e      	BRTC __MODW212
000292 dfce      	RCALL __ANEGW1
                 __MODW212:
000293 9508      	RET
                 
                 __PUTDP1:
000294 93ed      	ST   X+,R30
000295 93fd      	ST   X+,R31
000296 936d      	ST   X+,R22
000297 937c      	ST   X,R23
000298 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  28 r1 :  22 r2 :   0 r3 :   0 r4 :   2 r5 :   2 r6 :   0 r7 :   9 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:  10 r18:  12 r19:  12 r20:  14 r21:  49 r22:  42 r23:  42 
r24:  21 r25:  28 r26:  25 r27:  14 r28:   1 r29:   1 r30:  99 r31:  46 
x  :   7 y  :   0 z  :   7 
Registers used: 22 out of 35 (62.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   7 
adiw  :   3 and   :   2 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   9 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   2 brmi  :   5 brne  :  14 brpl  :   5 brsh  :   0 brtc  :   2 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   0 call  :   8 
cbi   :   2 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  27 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   6 
cp    :   1 cpc   :   3 cpi   :  12 cpse  :   0 dec   :   8 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  23 ld    :   0 ldd   :   0 ldi   :  63 
lds   :   8 lpm   :   7 lsl   :  11 lsr   :   1 mov   :  31 movw  :  12 
mul   :   9 muls  :   1 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   1 out   :  18 pop   :  16 push  :  15 rcall :  30 ret   :  21 
reti  :   0 rjmp  :  56 rol   :  25 ror   :   7 sbc   :   6 sbci  :   6 
sbi   :   4 sbic  :  18 sbis  :  12 sbiw  :   6 sbr   :   1 sbrc  :   1 
sbrs  :   2 sec   :   3 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   7 std   :   0 sts   :   4 sub   :   3 subi  :   1 swap  :   0 
tst   :  12 wdr   :   1 
Instructions used: 70 out of 116 (60.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000532   1320     10   1330   32768   4.1%
[.dseg] 0x000060 0x000264      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
